using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using FairyGUI;
using FairyGUI.CodeGenerator;
using FairyGUI.CodeGenerator.Core;
using FairyGUI.CodeGenerator.Scriban;
using UnityEditor;

namespace HoweFramework.Editor.FairyGUI
{
    /// <summary>
    /// FairyGUI 代码生成器。
    /// </summary>
    public static class FairyGUICodeGenerator
    {
        private static FairyGUICodeGenerateSetting s_Setting;

        private static readonly List<string> s_UIFormNameList = new();
        private static readonly Dictionary<string, string> s_UIFormFullNameDict = new();

        private static readonly List<string> s_UIComponentFullNameList = new();

        public static void GenerateCode(string uiAssetsRoot, FairyGUICodeGenerateSetting setting)
        {
            s_Setting = setting;
            s_UIFormNameList.Clear();
            s_UIFormFullNameDict.Clear();
            s_UIComponentFullNameList.Clear();

            var filter = new UIComponentFilter(setting.Namespace);

            if (!Directory.Exists(setting.UIBindingCodeDirectory))
            {
                Directory.CreateDirectory(setting.UIBindingCodeDirectory);
            }

            // 记录此时的绑定文件列表
            var bindingFiles = Directory.GetFiles(setting.UIBindingCodeDirectory, "*.Designer.cs", SearchOption.AllDirectories);

            #region [生成UI绑定代码]

            // 删除所有绑定文件，然后重新生成。
            foreach (var bindingFile in bindingFiles)
            {
                File.Delete(bindingFile);
            }

            UICodeGenerator.Generate(uiAssetsRoot, "_fui.bytes", new ScribanCodeGenerator(GetBindingCodeExportSettings), filter);

            #endregion

            #region [生成UI逻辑代码]

            // 一个文件只生成一次
            if (!Directory.Exists(setting.UILogicCodeDirectory))
                Directory.CreateDirectory(setting.UILogicCodeDirectory);

            UICodeGenerator.Generate(uiAssetsRoot, "_fui.bytes", new ScribanCodeGenerator(GetLogicCodeExportSettings), filter);

            #endregion

            // 重新获取绑定文件列表 将不存在的绑定文件对应的逻辑文件删除
            var newBindingFiles = Directory.GetFiles(setting.UIBindingCodeDirectory, "*.Designer.cs", SearchOption.AllDirectories);
            foreach (var bindingFile in bindingFiles)
            {
                if (newBindingFiles.Contains(bindingFile))
                {
                    continue;
                }

                var logicFile = bindingFile.Replace(setting.UIBindingCodeDirectory, setting.UILogicCodeDirectory);
                if (File.Exists(logicFile))
                {
                    File.Delete(logicFile);
                }
            }

            // 对界面名进行排序。
            s_UIFormNameList.Sort((a, b) => string.CompareOrdinal(a, b));
            // 对组件名进行排序。
            s_UIComponentFullNameList.Sort((a, b) => string.CompareOrdinal(a, b));

            // 生成UIFormId枚举。
            GenerateUIFormIdEnum();

            // 生成UIFormBindings类。
            GenerateUIFormBindingsClass();

            // 生成UIComponentBindings类。
            GenerateUIComponentBindingsClass();

            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh(ImportAssetOptions.ForceUpdate);
        }

        /// <summary>
        /// 生成UIFormId枚举。
        /// </summary>
        private static void GenerateUIFormIdEnum()
        {
            var outputPath = s_Setting.UIBindingCodeDirectory + "/UIFormId.cs";
            if (File.Exists(outputPath))
            {
                File.Delete(outputPath);
            }
            
            var stringBuilder = new StringBuilder();

            stringBuilder.AppendAutoGeneratedHeaderComment();
            stringBuilder.AppendFormat("namespace {0}", s_Setting.Namespace);
            stringBuilder.AppendLine();
            stringBuilder.AppendLine("{");
            stringBuilder.AppendLine("    /// <summary>");
            stringBuilder.AppendLine("    /// 界面Id。");
            stringBuilder.AppendLine("    /// </summary>");
            stringBuilder.AppendLine("    public enum UIFormId");
            stringBuilder.AppendLine("    {");

            for (int i = 0; i < s_UIFormNameList.Count; i++)
            {
                stringBuilder.AppendFormat("        {0} = {1},", s_UIFormNameList[i], i + 1);
                stringBuilder.AppendLine();
            }

            stringBuilder.AppendLine("    }");
            stringBuilder.AppendLine("}");

            File.WriteAllText(outputPath, stringBuilder.ToString());
        }

        /// <summary>
        /// 生成UIFormBindings类。
        /// </summary>
        private static void GenerateUIFormBindingsClass()
        {
            var outputPath = s_Setting.UIBindingCodeDirectory + "/UIFormBindings.cs";
            if (File.Exists(outputPath))
            {
                File.Delete(outputPath);
            }

            var stringBuilder = new StringBuilder();

            stringBuilder.AppendAutoGeneratedHeaderComment();
            stringBuilder.AppendLine("using HoweFramework;");
            stringBuilder.AppendLine();
            stringBuilder.AppendFormat("namespace {0}", s_Setting.Namespace);
            stringBuilder.AppendLine();
            stringBuilder.AppendLine("{");
            stringBuilder.AppendLine("    /// <summary>");
            stringBuilder.AppendLine("    /// 界面绑定。");
            stringBuilder.AppendLine("    /// </summary>");
            stringBuilder.AppendLine("    public static class UIFormBindings");
            stringBuilder.AppendLine("    {");
            stringBuilder.AppendLine("        public static readonly FairyGUIFormBinding[] Bindings = new FairyGUIFormBinding[]");
            stringBuilder.AppendLine("        {");

            foreach (var uiFormName in s_UIFormNameList)
            {
                var fullName = s_UIFormFullNameDict[uiFormName];
                stringBuilder.AppendFormat("            new FairyGUIFormBinding((int)UIFormId.{0}, {1}.URL, () => new {2}()),", uiFormName, fullName, fullName);
                stringBuilder.AppendLine();
            }

            stringBuilder.AppendLine("        };");
            stringBuilder.AppendLine("    }");
            stringBuilder.AppendLine("}");

            File.WriteAllText(outputPath, stringBuilder.ToString());
        }

        /// <summary>
        /// 生成UIComponentBindings类。
        /// </summary>
        private static void GenerateUIComponentBindingsClass()
        {
            var outputPath = s_Setting.UIBindingCodeDirectory + "/UIComponentBindings.cs";
            if (File.Exists(outputPath))
            {
                File.Delete(outputPath);
            }

            var stringBuilder = new StringBuilder();

            stringBuilder.AppendAutoGeneratedHeaderComment();
            stringBuilder.AppendLine("using HoweFramework;");
            stringBuilder.AppendLine();
            stringBuilder.AppendFormat("namespace {0}", s_Setting.Namespace);
            stringBuilder.AppendLine();
            stringBuilder.AppendLine("{");
            stringBuilder.AppendLine("    /// <summary>");
            stringBuilder.AppendLine("    /// 组件绑定。");
            stringBuilder.AppendLine("    /// </summary>");
            stringBuilder.AppendLine("    public static class UIComponentBindings");
            stringBuilder.AppendLine("    {");
            stringBuilder.AppendLine("        public static readonly FairyGUIComponentBinding[] Bindings = new FairyGUIComponentBinding[]");
            stringBuilder.AppendLine("        {");

            foreach (var uiComponentName in s_UIComponentFullNameList)
            {
                stringBuilder.AppendFormat("            new FairyGUIComponentBinding({0}.URL, () => new {1}()),", uiComponentName, uiComponentName);
                stringBuilder.AppendLine();
            }

            stringBuilder.AppendLine("        };");
            stringBuilder.AppendLine("    }");
            stringBuilder.AppendLine("}");

            File.WriteAllText(outputPath, stringBuilder.ToString());
        }

        private sealed class UIComponentFilter : IUIComponentFilter
        {
            private readonly string m_Namespace;

            public UIComponentFilter(string ns)
            {
                m_Namespace = ns;
            }

            public string Filter(UIComponent component)
            {
                var exportType = GetExportType(component);
                if (exportType == UIComponentExportType.None)
                    return component.ExtensionType.FullName;

                return m_Namespace + "." + component.PackageName + "." + component.Name;
            }
        }

        private static bool GetLogicCodeExportSettings(UIComponent component, out string templatePath, out string outputPath)
        {
            templatePath = string.Empty;
            outputPath = s_Setting.UILogicCodeDirectory + "/" + component.PackageName + "/" + component.Name + ".cs";

            // 如果已经存在，则不再生成
            if (File.Exists(outputPath))
                return false;

            var exportType = GetExportType(component);
            switch (exportType)
            {
                case UIComponentExportType.None:
                    return false;
                case UIComponentExportType.UIForm:
                    templatePath = s_Setting.ScribanTemplateDirectory + "/UIForm.tpl";
                    return true;
                case UIComponentExportType.UIComponent:
                    templatePath = s_Setting.ScribanTemplateDirectory + "/UIComponent.tpl";
                    return true;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }

        private static bool GetBindingCodeExportSettings(UIComponent component, out string templatePath, out string outputPath)
        {
            templatePath = string.Empty;
            outputPath = s_Setting.UIBindingCodeDirectory + "/" + component.PackageName + "/" + component.Name + ".Designer.cs";

            var exportType = GetExportType(component);
            switch (exportType)
            {
                case UIComponentExportType.None:
                    return false;
                case UIComponentExportType.UIForm:
                    templatePath = s_Setting.ScribanTemplateDirectory + "/UIForm.Binding.tpl";
                    s_UIFormNameList.Add(component.Name);
                    s_UIFormFullNameDict.Add(component.Name, s_Setting.Namespace + "." + component.PackageName + "." + component.Name);
                    return true;
                case UIComponentExportType.UIComponent:
                    templatePath = s_Setting.ScribanTemplateDirectory + "/UIComponent.Binding.tpl";
                    s_UIComponentFullNameList.Add(s_Setting.Namespace + "." + component.PackageName + "." + component.Name);
                    return true;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }

        private static UIComponentExportType GetExportType(UIComponent component)
        {
            // 以Form结尾的组件导出为UIForm
            if (component.Name.EndsWith("Form"))
                return UIComponentExportType.UIForm;

            // 以Component结尾的组件导出为UIComponent
            if (component.Name.EndsWith("Component"))
                return UIComponentExportType.UIComponent;

            // 当子节点中存在任意非拓展组件类型支持的自定义名字时 导出为UIComponent
            var extendTypeSupportNames = ExtendTypeSupportNames[component.ExtensionType];

            bool ExistsNotSupportName(UIComponentNode child)
            {
                return !extendTypeSupportNames.Contains(child.Name) && !Regex.IsMatch(child.Name, @"^n[0-9]+$");
            }

            if (component.Nodes.Any(ExistsNotSupportName))
                return UIComponentExportType.UIComponent;

            return UIComponentExportType.None;
        }

        private enum UIComponentExportType
        {
            None,
            UIForm,
            UIComponent,
        }

        private static readonly Dictionary<System.Type, List<string>> ExtendTypeSupportNames = new Dictionary<System.Type, List<string>>
        {
            { typeof(GButton), new List<string> { "icon", "title" } },
            { typeof(GLabel), new List<string> { "icon", "title" } },
            { typeof(GComboBox), new List<string> { "icon", "title" } },
            { typeof(GProgressBar), new List<string> { "title", "bar", "bar_v", "ani" } },
            { typeof(GSlider), new List<string> { "title", "bar", "bar_v", "grip" } },
            { typeof(GScrollBar), new List<string> { "grip", "bar", "arrow1", "arrow2" } },
            { typeof(GComponent), new List<string>() }
        };
    }
}