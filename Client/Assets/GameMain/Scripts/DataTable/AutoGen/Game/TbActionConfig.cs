
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using Cysharp.Threading.Tasks;
using HoweFramework;


namespace GameMain.Game
{
public partial class TbActionConfig : IDataTable
{
    private readonly string m_DataTableName;
    private readonly LoadDataTableFunc m_LoadDataTableFunc;
    private readonly LoadDataTableAsyncFunc m_LoadDataTableAsyncFunc;
    private readonly GameMainDataTableSource m_Manager;
    
    public static TbActionConfig Instance { get; private set; }
    public DataTableLoadStatus LoadStatus { get; private set; }
    
    public TbActionConfig(GameMainDataTableSource manager, string dataTableName, LoadDataTableFunc loadDataTableFunc, LoadDataTableAsyncFunc loadDataTableAsyncFunc)
    {
        Instance = this;
        m_Manager = manager;
        m_DataTableName = dataTableName;
        m_LoadDataTableFunc = loadDataTableFunc;
        m_LoadDataTableAsyncFunc = loadDataTableAsyncFunc;
        LoadStatus = DataTableLoadStatus.None;
    }

    public void Dispose()
    {
        Instance = null;
    }
    
    public void Load(bool autoResolveRef = true)
    {
        if (LoadStatus == DataTableLoadStatus.Loaded)
        {
            return;
        }
        
        if (LoadStatus == DataTableLoadStatus.Loading)
        {
            Log.Error("DataTable TbActionConfig is loading");
            return;
        }
        
        LoadStatus = DataTableLoadStatus.Loading;
        var _buf = m_LoadDataTableFunc(m_DataTableName);
        if (_buf == null)
        {
            LoadStatus = DataTableLoadStatus.None;
            Log.Error("DataTable TbActionConfig load failed");
            return;
        }
        
        LoadStatus = DataTableLoadStatus.Loaded;
        OnLoadSuccess(_buf);
        if (autoResolveRef)
        {
            ResolveRef();
        }
    }
    
    public async UniTask LoadAsync(bool autoResolveRef = true)
    {
        if (LoadStatus == DataTableLoadStatus.Loaded)
        {
            return;
        }
        
        if (LoadStatus == DataTableLoadStatus.Loading)
        {
            throw new System.Exception("DataTable TbActionConfig is loading");
        }
        
        LoadStatus = DataTableLoadStatus.Loading;
        var _buf = await m_LoadDataTableAsyncFunc(m_DataTableName);
        if (_buf == null)
        {
            LoadStatus = DataTableLoadStatus.None;
            throw new System.Exception("DataTable TbActionConfig load failed");
        }
        
        LoadStatus = DataTableLoadStatus.Loaded;
        OnLoadSuccess(_buf);
        if (autoResolveRef)
        {
            ResolveRef();
        }
    }

    private System.Collections.Generic.Dictionary<int, Game.ActionConfig> _dataMap;
    private System.Collections.Generic.List<Game.ActionConfig> _dataList;
    
    private void OnLoadSuccess(ByteBuf _buf)
    {
        _dataMap = new System.Collections.Generic.Dictionary<int, Game.ActionConfig>();
        _dataList = new System.Collections.Generic.List<Game.ActionConfig>();
        
        for(int n = _buf.ReadSize() ; n > 0 ; --n)
        {
            Game.ActionConfig _v;
            _v = Game.ActionConfig.DeserializeActionConfig(_buf);
            _dataList.Add(_v);
            _dataMap.Add(_v.Id, _v);
        }
    }

    public System.Collections.Generic.Dictionary<int, Game.ActionConfig> DataMap
    {
        get
        {
            Load();
            return _dataMap;
        }
    }
    
    public System.Collections.Generic.List<Game.ActionConfig> DataList
    {
        get
        {
            Load();
            return _dataList;
        }
    }

    public Game.ActionConfig GetOrDefault(int key) => DataMap.TryGetValue(key, out var v) ? v : null;
    public Game.ActionConfig Get(int key) => DataMap[key];
    public Game.ActionConfig this[int key] => DataMap[key];

    public void ResolveRef()
    {
        if (LoadStatus != DataTableLoadStatus.Loaded)
        {
            return;
        }
        
        foreach(var _v in _dataList)
        {
            _v.ResolveRef(m_Manager);
        }
    }

}

}

