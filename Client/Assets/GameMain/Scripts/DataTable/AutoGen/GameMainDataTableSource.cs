
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using Cysharp.Threading.Tasks;
using HoweFramework;
using System.Collections.Generic;

namespace GameMain
{
    public partial class GameMainDataTableSource : IDataTableSource
    {
        public Game.TbSkillConfig TbSkillConfig { get; private set; }
        public Game.TbBuffConfig TbBuffConfig { get; private set; }
        public Game.TbActionConfig TbActionConfig { get; private set; }

        /// <summary>
        /// 完整的数据表列表。
        /// </summary>
        private List<IDataTable> m_DataTableList;
        
        /// <summary>
        /// 需要预加载的数据表列表。
        /// </summary>
        private List<IDataTable> m_PreloadDataTableList;
        
        public void Init(DataTableLoadMode mode)
        {
            var isPreloadAll = mode == DataTableLoadMode.AsyncLoad || mode == DataTableLoadMode.SyncLoad;
            TbSkillConfig = new Game.TbSkillConfig(this, "game_tbskillconfig", LoadDataTable, LoadDataTableAsync);
            TbBuffConfig = new Game.TbBuffConfig(this, "game_tbbuffconfig", LoadDataTable, LoadDataTableAsync);
            TbActionConfig = new Game.TbActionConfig(this, "game_tbactionconfig", LoadDataTable, LoadDataTableAsync);

            m_DataTableList = new List<IDataTable>()
            {
                TbSkillConfig,
                TbBuffConfig,
                TbActionConfig,
            };
            
            if (isPreloadAll)
            {
                m_PreloadDataTableList = new List<IDataTable> 
                {
                    TbSkillConfig,
                    TbBuffConfig,
                    TbActionConfig,
                };
            }
            else
            {
                m_PreloadDataTableList = GetPreloadDataTables();
            }
        }
        
        public void Preload()
        {
            foreach (var dataTable in m_PreloadDataTableList)
            {
                dataTable.Load(false);
            }
            
            foreach (var dataTable in m_PreloadDataTableList)
            {
                dataTable.ResolveRef();
            }
        }
        
        public async UniTask PreloadAsync()
        {
            await UniTask.WhenAll(m_PreloadDataTableList.Select(dataTable => dataTable.LoadAsync(false)));
            
            foreach (var dataTable in m_PreloadDataTableList)
            {
                dataTable.ResolveRef();
            }
        }
    }

}

